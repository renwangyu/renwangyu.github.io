{"version":3,"sources":["pages/home/home.jsx","pages/home/index.js","canvas/base.js","utils.js","canvas/meteor.js","canvas/meteor-rain.js","pages/universe/universe.jsx","pages/universe/index.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","Crood","x","y","this","setX","setY","noop","getRandom","n","m","Math","floor","random","rAF","window","requestAnimationFrame","cb","setTimeout","PI","Meteor","params","id","canvas","ctx","from","to","speed","delt","r","color","cbDistory","handle","isDistory","dur","sqrt","pow","pass","now","copyCrood","min","percent","distory","setCrood","save","beginPath","arc","fillStyle","fill","restore","width","height","draw","start","bind","clearRect","cancelAnimationFrame","MeteorRain","num","timer","rain","isStop","generateRain","setInterval","i","push","createOneMeteor","every","meteor","stop","forEach","launch","index","toWidth","toHeight","clearInterval","screenAvailWidth","screen","availWidth","screenAvailHeight","availHeight","Universe","canvasRef","useRef","useEffect","current","getContext","ref","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.57aaa380.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Home() {\n  return (\n    <div className=\"page-home\">\n      <div>renwangyu</div>\n    </div>\n  );\n}\n\nexport default Home;\n","import './home.scss';\nimport Home from './home';\n\nexport default Home;\n","class Crood {\n  constructor(x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n  }\n  setX(x) {\n    this.x = x;\n  }\n  setY(y) {\n    this.y = y;\n  }\n  setCrood(x, y) {\n    x && this.setX(x);\n    y && this.setY(y);\n  }\n  copyCrood() {\n    return new Crood(this.x, this.y);\n  }\n  getCroodXY() {\n    return [this.x, this.y];\n  }\n}\n\nclass Base {\n\n}\n\nexport {\n  Crood,\n}\n","export const noop = () => void(0);\n\nexport const getRandom = (n, m) => Math.floor(Math.random() * (m - n + 1) + n);\n\nexport const rAF = window.requestAnimationFrame || (cb => setTimeout(cb, 0));\n","import { noop } from 'src/utils';\nimport { Crood } from './base';\nimport { rAF } from 'src/utils';\n\nconst PI = Math.PI;\n\nclass Meteor {\n  constructor(params) {\n    const {\n      id,\n      canvas,\n      ctx,\n      from = new Crood(0, 0),\n      to = new Crood(0, 0),\n      speed = 0, // px/s\n      delt = 10,\n      r = 1, // raduis px\n      color = 'rgba(250,250,250,1)',\n      cbDistory = noop, // distory callback function\n    } = params;\n\n    this.canvas = canvas;\n    this.ctx = ctx;\n    this.id = id;\n    this.from = from;\n    this.to = to;\n    this.speed = speed;\n    this.delt = delt;\n    this.r = r;\n    this.color = color;\n    this.cbDistory = cbDistory;\n    this.handle = null; // raf handle\n    this.isDistory = false;\n\n    this.dur = Math.sqrt(Math.pow(this.to.x - this.from.x, 2) + Math.pow(this.to.y - this.from.y, 2)) * 1000 / this.speed;\n    this.pass = 0;\n    this.now = this.from.copyCrood();\n  }\n\n  draw() {\n    \n    this.pass = Math.min(this.pass + this.delt, this.dur);\n    const percent = this.pass / this.dur;\n    if (percent === 1) {\n      return this.distory();\n    }\n    this.now.setCrood(\n      this.from.x + (this.to.x - this.from.x) * percent,\n      this.from.y + (this.to.y - this.from.y) * percent,\n    );\n\n    this.ctx.save();\n    this.ctx.beginPath(); \n    this.ctx.arc(this.now.x, this.now.y, this.r * 1, 0, PI * 2, true); \n    this.ctx.fillStyle = this.color;\n    this.ctx.fill();\n    this.ctx.restore();\n  }\n\n  isOutRange() {\n    const { width, height } = this.canvas;\n    return (this.now.x >= width) || (this.now.y >= height) || (this.now.x <= 0) || (this.now.y <= 0);\n  }\n\n  start() {\n    const { width, height } = this.canvas;\n    if ((this.now.x >= width) || (this.now.y) >= height) {\n      return this.distory();\n    }\n    this.draw();\n    this.handle = rAF(this.start.bind(this));\n  }\n\n  distory() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.ctx.clearRect(this.now.x - this.r, this.now.y - this.r, this.r * 2, this.r * 2);\n    cancelAnimationFrame(this.handle);\n    this.isDistory = true;\n    typeof this.cbDistory === 'function' && this.cbDistory();\n  }\n\n}\n\nexport default Meteor;\n","import Meteor from './meteor';\nimport { Crood } from 'src/canvas/base';\nimport { getRandom, rAF } from 'src/utils';\n\nclass MeteorRain {\n  constructor(params) {\n    const { canvas, ctx, num = 100 } = params;\n    this.canvas = canvas;\n    this.ctx = ctx;\n    this.num = num;\n    this.handle = null;\n    this.timer = null;\n    this.rain = [];\n    this.isStop = false;\n\n    this.generateRain();\n    this.timer = setInterval(() => {\n      this.generateRain();\n    }, 2000);\n  }\n\n  generateRain() {\n    for (let i = 0; i < this.num; i++) {\n      this.rain.push(this.createOneMeteor(i));\n    }\n  }\n\n  launch() {\n    const isStop = this.rain.every(meteor => meteor.isDistory);\n    if (isStop) {\n      return this.stop();\n    }\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.rain.forEach(meteor => {\n      !meteor.isDistory && meteor.draw();\n    });\n\n    this.handle = rAF(this.launch.bind(this));\n  }\n\n  createOneMeteor(index) {\n    const speed = getRandom(300, 500);\n    const delt = getRandom(10, 15);\n    const toWidth = getRandom(0, this.canvas.width);\n    const toHeight = getRandom(0, this.canvas.height);\n    // const red = getRandom(0, 255);\n    // const green = getRandom(0, 255);\n    // const blue = getRandom(0, 255);\n    \n    return new Meteor({\n      id: index,\n      from: new Crood(this.canvas.width / 2, this.canvas.height / 2),\n      to: new Crood(toWidth, toHeight),\n      speed,\n      delt,\n      canvas: this.canvas,\n      ctx: this.ctx,\n      // color: `rgba(${red},${green},${blue},1)`\n    });\n  }\n\n  stop() {\n    this.isStop = true;\n    clearInterval(this.handle);\n  }\n}\n\nexport default MeteorRain;\n","import React, { useEffect, useRef } from 'react';\nimport { Crood } from 'src/canvas/base';\nimport Meteor from 'src/canvas/meteor';\nimport MeteorRain from 'src/canvas/meteor-rain';\n\nconst screenAvailWidth = window.screen.availWidth;\nconst screenAvailHeight = window.screen.availHeight;\n\nfunction Universe() {\n  const canvasRef = useRef();\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let rain = new MeteorRain({ canvas, ctx, num: 100 });\n    rain.launch();\n  });\n\n  return (\n    <div className=\"page-universe\">\n      <canvas\n        ref={canvasRef}\n        id=\"meteor\"\n        width={ screenAvailWidth }\n        height={ screenAvailHeight }\n        />\n    </div>\n  )\n}\n\nexport default Universe;\n","import './universe.scss';\nimport Universe from './universe';\n\nexport default Universe;\n","import React from 'react';\nimport './App.scss';\nimport Home from './pages/home';\nimport Universe from './pages/universe';\n\nfunction App() {\n  return (\n    <div className=\"stage\">\n      <div className=\"my-story\">\n        <Universe />\n        <Home />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}